#creating a docker compose file Version 1

#step 1: after running and tested all docker run commands, create a dictionary with key as container name as mentioned in docker run command
vote:
  #step 2: add image to be used 
  image: voting-app
  #step 3: publish ports
  ports:
    - 5000:80
  #srep 4: add links
  links:
    - redis: redis


redis:
  image: redis 

db:
  image: postgres 


result: 
  image: result-app
  ports:
    - 5001:80
  links:
    - db # writing only db create a link with the same host name 

worker:
  image: worker
  links:
    - redis 
    - db



# Suppose the image is not already present on the docker hub. We need to create an image for the same.
# to specify docker to build an image rather than pull, we need to specify build tag along with the path of docker file

build_result:
  build: ./<name of the image> #/path/to/dockerfile/<name of the image>
  ports:
    - 5001:80
  links:
    - db


# The above is the base version 1 of socker compose file. Number of things changed after that

###############################################################################################################################
########################################################### VERSION 2 #####################################
###############################################################################################################################

# 1) In version 2,  we dont directly specify all the container names. all things comes under services tag
# 2) version 2 automatically resolves network depency, so no dependency on links
# 3) If there is any dependency, that one container should start first before second container, use depends_on tag
# 4) to determine, which version of docker file we are using, add tag of version

version: 2
service:
  #step 1: after running and tested all docker run commands, create a dictionary with key as container name as mentioned in docker run command
  vote:
    #step 2: add image to be used 
    image: voting-app
    #step 3: publish ports
    ports:
      - 5000:80
    #step 4: dependency on other container
    depends_on:
      - redis

  redis:
    image: redis 

  db:
    image: postgres 


  result:
    image: result-app
    ports:
      - 5001:80

  worker:
    image: worker



###############################################################################################################################
########################################################### VERSION 3 #####################################
###############################################################################################################################

# In version 3, there is new thing called networks. Which so ever application belongs to same network, they can communicate with each other
# that netowrk need to mentioned in the application
# in version 3, it automatically creates a network for the application, so no need to mention links separately

version_: 3
service_:
  #step 1: after running and tested all docker run commands, create a dictionary with key as container name as mentioned in docker run command
  vote:
    #step 2: add image to be used 
    image: voting-app
    #step 3: publish ports
    ports:
      - 5000:80
    #step 4: dependency on other container
    depends_on:
      - redis

  redis:
    image: redis 

  db:
    image: postgres  
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres


  result:
    image: result-app
    networks:
      - backend
      - frontend
    ports:
      - 5001:80

  worker:
    image: worker

  networks:
    backend:
    frontend:
